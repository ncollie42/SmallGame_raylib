// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package myProto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Player struct {
	Location             *Player_Cord `protobuf:"bytes,1,req,name=location" json:"location,omitempty"`
	Name                 *string      `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetLocation() *Player_Cord {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Player) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Player_Cord struct {
	X                    *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_Cord) Reset()         { *m = Player_Cord{} }
func (m *Player_Cord) String() string { return proto.CompactTextString(m) }
func (*Player_Cord) ProtoMessage()    {}
func (*Player_Cord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0}
}

func (m *Player_Cord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player_Cord.Unmarshal(m, b)
}
func (m *Player_Cord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player_Cord.Marshal(b, m, deterministic)
}
func (m *Player_Cord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_Cord.Merge(m, src)
}
func (m *Player_Cord) XXX_Size() int {
	return xxx_messageInfo_Player_Cord.Size(m)
}
func (m *Player_Cord) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_Cord.DiscardUnknown(m)
}

var xxx_messageInfo_Player_Cord proto.InternalMessageInfo

func (m *Player_Cord) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Player_Cord) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

type AllPlayers struct {
	PlayerMap            map[string]*Player `protobuf:"bytes,1,rep,name=playerMap" json:"playerMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AllPlayers) Reset()         { *m = AllPlayers{} }
func (m *AllPlayers) String() string { return proto.CompactTextString(m) }
func (*AllPlayers) ProtoMessage()    {}
func (*AllPlayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *AllPlayers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllPlayers.Unmarshal(m, b)
}
func (m *AllPlayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllPlayers.Marshal(b, m, deterministic)
}
func (m *AllPlayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayers.Merge(m, src)
}
func (m *AllPlayers) XXX_Size() int {
	return xxx_messageInfo_AllPlayers.Size(m)
}
func (m *AllPlayers) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayers.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayers proto.InternalMessageInfo

func (m *AllPlayers) GetPlayerMap() map[string]*Player {
	if m != nil {
		return m.PlayerMap
	}
	return nil
}

func init() {
	proto.RegisterType((*Player)(nil), "myProto.Player")
	proto.RegisterType((*Player_Cord)(nil), "myProto.Player.Cord")
	proto.RegisterType((*AllPlayers)(nil), "myProto.AllPlayers")
	proto.RegisterMapType((map[string]*Player)(nil), "myProto.AllPlayers.PlayerMapEntry")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0x9d, 0x6d, 0x5a, 0xcd, 0xc4, 0x7f, 0xac, 0x1e, 0x42, 0x4e, 0x21, 0x20, 0xec, 0x29,
	0x86, 0x9c, 0xd4, 0x93, 0x22, 0x1e, 0x03, 0x65, 0xc5, 0x07, 0x58, 0xd2, 0x3d, 0x44, 0xb7, 0xd9,
	0xb0, 0xd9, 0x86, 0xee, 0xc3, 0xf8, 0x64, 0xbe, 0x8c, 0x24, 0x29, 0x2d, 0x16, 0x0f, 0xed, 0xed,
	0x37, 0xcc, 0x37, 0x33, 0xdf, 0xe0, 0x45, 0x2b, 0x4d, 0x57, 0x95, 0x32, 0x6d, 0x8c, 0xb6, 0x9a,
	0x9e, 0x2e, 0xdd, 0xbc, 0x0f, 0x89, 0xc1, 0xd9, 0x5c, 0x09, 0x27, 0x0d, 0xcd, 0xf0, 0x4c, 0xe9,
	0x52, 0xd8, 0x4a, 0xd7, 0x21, 0xc4, 0x84, 0x05, 0xf9, 0x6d, 0xba, 0xa1, 0xd2, 0x11, 0x49, 0x5f,
	0xb5, 0x59, 0xf0, 0x2d, 0x45, 0x29, 0x7a, 0xb5, 0x58, 0xca, 0x90, 0xc4, 0x84, 0xf9, 0x7c, 0xc8,
	0x51, 0x82, 0x5e, 0x4f, 0xd1, 0x73, 0x84, 0xf5, 0xb0, 0x86, 0x70, 0x58, 0xf7, 0x95, 0x1b, 0x30,
	0xc2, 0xc1, 0x25, 0xdf, 0x80, 0xf8, 0xa2, 0xd4, 0xb8, 0xb4, 0xa5, 0xcf, 0xe8, 0x37, 0x43, 0x2c,
	0x44, 0x13, 0x42, 0x3c, 0x61, 0x41, 0x9e, 0x6c, 0x2f, 0xef, 0xb8, 0x8d, 0x44, 0x21, 0x9a, 0xb7,
	0xda, 0x1a, 0xc7, 0x77, 0x43, 0x51, 0x81, 0x97, 0x7f, 0x9b, 0xf4, 0x1a, 0x27, 0x5f, 0xd2, 0x85,
	0x10, 0x03, 0xf3, 0x79, 0x1f, 0xe9, 0x1d, 0x4e, 0x3b, 0xa1, 0x56, 0xbd, 0x2d, 0xb0, 0x20, 0xbf,
	0xda, 0xfb, 0x8d, 0x8f, 0xdd, 0x27, 0xf2, 0x00, 0xf9, 0x0f, 0x60, 0xb0, 0x6a, 0x16, 0xc2, 0xca,
	0x77, 0x2b, 0xac, 0xa4, 0x19, 0xce, 0xc6, 0x92, 0xee, 0x4f, 0x45, 0x37, 0xff, 0x88, 0x26, 0x27,
	0x34, 0x45, 0xef, 0x53, 0x57, 0xf5, 0xc1, 0xfc, 0x3d, 0x4e, 0x95, 0x14, 0xdd, 0xe1, 0x07, 0x1e,
	0x31, 0x28, 0x75, 0xdd, 0xda, 0x8f, 0xa3, 0xbc, 0x18, 0x64, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x34, 0x34, 0x04, 0x3d, 0x0a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateStateClient is the client API for UpdateState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateStateClient interface {
	Update(ctx context.Context, in *Player, opts ...grpc.CallOption) (*AllPlayers, error)
	Join(ctx context.Context, in *Player, opts ...grpc.CallOption) (*AllPlayers, error)
	Leave(ctx context.Context, in *Player, opts ...grpc.CallOption) (*AllPlayers, error)
	ConstUpdate(ctx context.Context, opts ...grpc.CallOption) (UpdateState_ConstUpdateClient, error)
}

type updateStateClient struct {
	cc *grpc.ClientConn
}

func NewUpdateStateClient(cc *grpc.ClientConn) UpdateStateClient {
	return &updateStateClient{cc}
}

func (c *updateStateClient) Update(ctx context.Context, in *Player, opts ...grpc.CallOption) (*AllPlayers, error) {
	out := new(AllPlayers)
	err := c.cc.Invoke(ctx, "/myProto.updateState/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateStateClient) Join(ctx context.Context, in *Player, opts ...grpc.CallOption) (*AllPlayers, error) {
	out := new(AllPlayers)
	err := c.cc.Invoke(ctx, "/myProto.updateState/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateStateClient) Leave(ctx context.Context, in *Player, opts ...grpc.CallOption) (*AllPlayers, error) {
	out := new(AllPlayers)
	err := c.cc.Invoke(ctx, "/myProto.updateState/leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateStateClient) ConstUpdate(ctx context.Context, opts ...grpc.CallOption) (UpdateState_ConstUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpdateState_serviceDesc.Streams[0], "/myProto.updateState/constUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateStateConstUpdateClient{stream}
	return x, nil
}

type UpdateState_ConstUpdateClient interface {
	Send(*Player) error
	Recv() (*AllPlayers, error)
	grpc.ClientStream
}

type updateStateConstUpdateClient struct {
	grpc.ClientStream
}

func (x *updateStateConstUpdateClient) Send(m *Player) error {
	return x.ClientStream.SendMsg(m)
}

func (x *updateStateConstUpdateClient) Recv() (*AllPlayers, error) {
	m := new(AllPlayers)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateStateServer is the server API for UpdateState service.
type UpdateStateServer interface {
	Update(context.Context, *Player) (*AllPlayers, error)
	Join(context.Context, *Player) (*AllPlayers, error)
	Leave(context.Context, *Player) (*AllPlayers, error)
	ConstUpdate(UpdateState_ConstUpdateServer) error
}

// UnimplementedUpdateStateServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateStateServer struct {
}

func (*UnimplementedUpdateStateServer) Update(ctx context.Context, req *Player) (*AllPlayers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUpdateStateServer) Join(ctx context.Context, req *Player) (*AllPlayers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedUpdateStateServer) Leave(ctx context.Context, req *Player) (*AllPlayers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedUpdateStateServer) ConstUpdate(srv UpdateState_ConstUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method ConstUpdate not implemented")
}

func RegisterUpdateStateServer(s *grpc.Server, srv UpdateStateServer) {
	s.RegisterService(&_UpdateState_serviceDesc, srv)
}

func _UpdateState_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateStateServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myProto.updateState/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateStateServer).Update(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateState_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateStateServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myProto.updateState/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateStateServer).Join(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateState_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateStateServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myProto.updateState/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateStateServer).Leave(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateState_ConstUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpdateStateServer).ConstUpdate(&updateStateConstUpdateServer{stream})
}

type UpdateState_ConstUpdateServer interface {
	Send(*AllPlayers) error
	Recv() (*Player, error)
	grpc.ServerStream
}

type updateStateConstUpdateServer struct {
	grpc.ServerStream
}

func (x *updateStateConstUpdateServer) Send(m *AllPlayers) error {
	return x.ServerStream.SendMsg(m)
}

func (x *updateStateConstUpdateServer) Recv() (*Player, error) {
	m := new(Player)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UpdateState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myProto.updateState",
	HandlerType: (*UpdateStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _UpdateState_Update_Handler,
		},
		{
			MethodName: "join",
			Handler:    _UpdateState_Join_Handler,
		},
		{
			MethodName: "leave",
			Handler:    _UpdateState_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "constUpdate",
			Handler:       _UpdateState_ConstUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
